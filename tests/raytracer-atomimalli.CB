//http://www.coolbasic.com/phpBB3/viewtopic.php?f=12&t=697&start=320#p41458

include "coolVec.CB"

Const screenw% = 300
Const screenh% = 300

fov=35
maxiters=8
 
SCREEN screenw, screenh

struct Material
    Field cv as ColorVec
    Field specularity#
    Field diffusivity#
endstruct

Type sphere
    Field pos as Vec
    Field origin as Vec
    Field size#
    Field m as Material
EndType

Type light
    Field pos As Vec
EndType

Struct rayHit
    Field pos as Vec
    Field normal as Vec
    Field m as Material
    Field dist as Float
endStruct

function newMaterial(cv As colorVec, diffusivity#, specularity#) as Material
    m as Material
    m.cv=cv:m.specularity=specularity:m.diffusivity=diffusivity
    return m
endFunction

function newSphere(x#,y#,z#,size#,r#,g#,b#,diffusivity#,specularity#) as Sphere
    s As sphere = New(sphere)
    s.origin=newVec(x#,y#,z#)
    s.size# = size#
    s.m=newMaterial(newColorVec(r#,g#,b#),diffusivity,specularity)
    return s
endFunction

function newLight(x#,y#,z#) as Light
    l As Light = New(Light)
    l.pos=newVec(x#,y#,z#)
    return l
endFunction

newSphere(-1,-1,7,  1.5,    255,0,0, 0.9,1)
newSphere(2,1,6,    1,      5,0,255, 0.8,1)
newSphere(0,1.5,7,  1,      5,205,0, 0.8,1)
newLight(-3,0,0)

cv as ColorVec// use single struct
global ambient as ColorVec = newColorVec(40,100,100)


lastUpdate as Integer
tim as Integer


Repeat
    Tim=Timer()
    fovc#=Tan(fov/2)/Cos(fov/2)'sama kulma joka resolla(pystysuunnassa)

    t# = t# + (Timer() - lastUpdate) / 500.0
    lastUpdate = Timer()
    t2# = t#

    For s As sphere = Each sphere
        s.pos.x# = s.origin.x# + Sin(t2# * 2.0) * 0.7
        s.pos.y# = s.origin.y# + Sin(t2# * 1.4 +124124) * 0.3
        s.pos.z# = s.origin.z# + Sin(t2# + 343) * 0.6
        t2# = t2# + t#
        s.m.specularity#=sin(timer()/20.0)*0.25+0.7
    Next s

    l as light = first(light)
    l.pos.x=sin(t*9.0)*10
    l.pos.z=cos(t*9.0)*10+10.0

    lock2(2) //writeonly lock
    For x#=0 To screenw-1
        For y#=0 To screenh-1
            campos as Vec = newVec(0,0,0)
            raydir as Vec = newVec(fovc*(float(x)/screenh-0.5*screenw/screenh)*2.0,fovc*(float(y)/screenh-0.5)*2.0,1)
            col as ColorVec=trace(cv,campos,raydir,maxiters)
            r as Byte = min(255,col.r)
            g as Byte = min(255,col.g)
            b as Byte = min(255,col.b)

            putpixel x,y,r,g,b
        Next
    Next
    unlock
    DrawScreen
    Print (Timer()-Tim)+" "+FPS()
Forever

function cast(pos as Vec, dir as Vec) as rayHit
    hit as rayHit
    hit.dist=0
    For obj as sphere=Each sphere
        b# = 2*vecDot(dir,vecSub(pos,obj.pos))
        c# = vecDot(obj.pos,obj.pos) + vecDot(pos,pos) -2*vecDot(obj.pos,pos) - obj.size#*obj.size#
        d# = b#*b# - 4*c#
        If d>0 Then
            tt# = (-b#-Sqrt(d#))/2
            If (hit.dist==0 or hit.dist#>tt) And tt>0.001
                hit.dist#=tt
                nearest As sphere=obj
            EndIf
        EndIf
    Next 
    If hit.dist Then
        hit.pos=vecSum(pos,vecMul(dir,hit.dist))
        hit.m=nearest.m
        hit.normal as Vec = normalize(vecSub(nearest.pos,hit.pos))
    endif
    return hit
endFunction

Function trace(cv as ColorVec, pos as Vec, dir as Vec, iters) As ColorVec
    dir=normalize(dir)
    hit as rayHit = cast(pos,dir)

    If hit.dist Then
        specularDir as Vec = normalize(vecProject(dir,hit.normal))
        //valaistus
        specular#=0
        diffuse#=0
        For valo As light=Each light
            lightVec as Vec = vecSub(valo.pos,hit.pos)
            lightDir as Vec = normalize(lightVec)
            shadow as rayHit = cast(hit.pos,lightdir)
            if shadow.dist==0 or shadow.dist>vecLength(lightVec) then
                diffuCos#=vecDot(hit.normal,lightDir)
                diffuse#=diffuse+Max(0.0,-diffuCos)
                specular#=specular+Max(0.0,-diffuCos)^8*0.5 //a hack for more interresting specular
                specular#=max(0.0,vecDot(lightdir,specularDir))^12/2.0+specular
            endif
        Next valo
        //heijastukset
        If iters>0 Then
            cv=trace(cv,hit.pos,speculardir,iters-1)
        Else
            cv=ambient
        EndIf
        diffuseAmount#=(1.0-hit.m.specularity)*hit.m.diffusivity
        cv.r=(hit.m.cv.r*diffuse+ambient.r)*diffuseAmount+(cv.r+specular*255)*hit.m.specularity
        cv.g=(hit.m.cv.g*diffuse+ambient.g)*diffuseAmount+(cv.g+specular*255)*hit.m.specularity
        cv.b=(hit.m.cv.b*diffuse+ambient.b)*diffuseAmount+(cv.b+specular*255)*hit.m.specularity
    Else
        cv=ambient
    EndIf
    Return cv
EndFunction
